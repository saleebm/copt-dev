// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model SpotifyUser {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  username       String   @unique
  refreshToken   String
  accessToken    String   @db.Char(255)
  tokenType      String
  scope          String
  recentlyPlayed Song[]
}

model Song {
  id            String             @id @default(uuid())
  createdAt     DateTime           @default(now())
  name          String?
  playedAt      DateTime?          @unique
  uri           String?
  previewUrl    String?
  songId        String?
  href          String?
  albumArtUrl   String?
  albumName     String?
  artistName    String?
  artistHref    String?
  spotifyUser   SpotifyUser        @relation(fields: [spotifyUserId], references: [id])
  spotifyUserId Int
  sentimentBar  MusicSentimentBar?
}

// unique instance of a sentiment
model MusicSentimentBar {
  id                     String                 @id @default(uuid())
  createdAt              DateTime               @default(now())
  musicSentimentAnalysis MusicSentimentAnalysis @relation(fields: [songId], references: [songId]) // 1 to many
  songId                 String // spotify song id
  song                   Song?                  @relation(fields: [songUuid], references: [id]) // 1 to 1
  songUuid               String?                @unique //the uuid of the song in the db
}

model MusicSentimentAnalysis {
  createdAt          DateTime            @default(now())
  id                 String              @id @default(uuid())
  songId             String              @unique
  mood               String?
  color              String?
  features           String?             @db.VarChar(1000) // keep track of features from Spotify to have the option to requeue without calling spotify
  musicSentimentBars MusicSentimentBar[] // has many bars, so we can store the analysis for one song once
}
